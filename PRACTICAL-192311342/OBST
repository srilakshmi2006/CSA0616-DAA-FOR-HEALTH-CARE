class OBST:
    def __init__(self, keys, freq):
        self.keys = keys
        self.freq = freq
        self.n = len(keys)
        self.cost = [[0] * self.n for _ in range(self.n)]
        self.root = [[0] * self.n for _ in range(self.n)]
        self._build_obst()
    def _build_obst(self):
        for i in range(self.n):
            self.cost[i][i] = self.freq[i]
        for length in range(2, self.n + 1):
            for i in range(self.n - length + 1):
                j = i + length - 1
                self.cost[i][j] = float('inf')
                for r in range(i, j + 1):
                    c = (self.cost[i][r - 1] if r > i else 0) + \
                        (self.cost[r + 1][j] if r < j else 0) + \
                        sum(self.freq[i:j + 1])
                    if c < self.cost[i][j]:
                        self.cost[i][j] = c
                        self.root[i][j] = r
    def get_cost(self):
        return self.cost[0][self.n - 1]
keys = [10, 12, 20]
freq = [34, 8, 50]
obst = OBST(keys, freq)
print("Minimum cost of OBST:", obst.get_cost())
