from collections import deque

def min_path_distance(grid, start, end):
    rows, cols = len(grid), len(grid[0])
    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]
    queue = deque([(start[0], start[1], 0)])  # (x, y, distance)
    visited = set([start])
    
    while queue:
        x, y, dist = queue.popleft()
        if (x, y) == end:
            return dist
        for dx, dy in directions:
            nx, ny = x + dx, y + dy
            if 0 <= nx < rows and 0 <= ny < cols and (nx, ny) not in visited and grid[nx][ny] == 0:
                visited.add((nx, ny))
                queue.append((nx, ny, dist + 1))
    return -1  # No path found

grid = [
    [0, 0, 1],
    [1, 0, 0],
    [0, 0, 0]
]
start = (0, 0)
end = (2, 2)
print(min_path_distance(grid, start, end))  # Output: 4

