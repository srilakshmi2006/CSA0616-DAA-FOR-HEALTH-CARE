def print_board(board):
    """Print the chessboard configuration"""
    for row in board:
        print(" ".join("Q" if cell else "." for cell in row))
    print()

def is_safe(board, row, col):
    """Check if placing a queen at (row, col) is safe"""
    # Check column for already placed queens
    for i in range(row):
        if board[i][col]:
            return False
    
    # Check diagonals for already placed queens
    for i, j in zip(range(row-1, -1, -1), range(col-1, -1, -1)):
        if board[i][j]:
            return False

    for i, j in zip(range(row-1, -1, -1), range(col+1, len(board))):
        if board[i][j]:
            return False

    return True

def solve_n_queens(board, row):
    """Try to solve the N-Queens problem row by row"""
    if row == len(board):
        print_board(board)
        return True

    # Try placing the queen in all columns of the current row
    for col in range(len(board)):
        if is_safe(board, row, col):
            board[row][col] = True  # Place queen
            if solve_n_queens(board, row + 1):  # Recurse to place queens in next rows
                return True
            board[row][col] = False  # Backtrack, remove queen

    return False

def n_queens(N):
    """Solve the N-Queens problem"""
    board = [[False] * N for _ in range(N)]  # Create an empty board (False means no queen)
    if not solve_n_queens(board, 0):
        print("Solution does not exist.")
    else:
        print("Solutions found above.")

# Example usage
n = 4  # Try solving for a 4x4 board
n_queens(n)
