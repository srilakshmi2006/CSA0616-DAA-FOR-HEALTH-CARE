import heapq
from collections import defaultdict

def huffman_coding(s):
    # Frequency of each character
    freq = defaultdict(int)
    for char in s:
        freq[char] += 1
    
    # Priority queue to store nodes
    heap = [[weight, [char, ""]] for char, weight in freq.items()]
    heapq.heapify(heap)
    
    while len(heap) > 1:
        lo = heapq.heappop(heap)
        hi = heapq.heappop(heap)
        for pair in lo[1:]:
            pair[1] = '0' + pair[1]
        for pair in hi[1:]:
            pair[1] = '1' + pair[1]
        heapq.heappush(heap, [lo[0] + hi[0]] + lo[1:] + hi[1:])
    
    return sorted(heap[0][1:], key=lambda p: (len(p[-1]), p))

# Example usage
s = "this is an example for huffman encoding"
print(huffman_coding(s))
